{
  "info": {
    "name": "Todo Garden API",
    "description": "Complete API collection for testing Todo Garden authentication system",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "1.0.0"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{access_token}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:49465",
      "type": "string"
    },
    {
      "key": "access_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "refresh_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "user_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "todo_id",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Health & Status",
      "item": [
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/health",
              "host": ["{{base_url}}"],
              "path": ["health"]
            },
            "description": "Check if the API is running and database is connected"
          },
          "response": []
        },
        {
          "name": "Database Test",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/test/db-test",
              "host": ["{{base_url}}"],
              "path": ["test", "db-test"]
            },
            "description": "Test database connection and verify all tables are accessible"
          },
          "response": []
        }
      ],
      "description": "Basic health checks and system status endpoints"
    },
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Register User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.status === 'success') {",
                  "        pm.collectionVariables.set('access_token', response.data.tokens.access_token);",
                  "        pm.collectionVariables.set('refresh_token', response.data.tokens.refresh_token);",
                  "        pm.collectionVariables.set('user_id', response.data.user.id);",
                  "        pm.test('Registration successful', () => {",
                  "            pm.expect(response.data.user.username).to.eql('testuser');",
                  "            pm.expect(response.data.user.email).to.eql('test@example.com');",
                  "        });",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"testuser\",\n  \"email\": \"test@example.com\",\n  \"password\": \"TestPassword123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/register",
              "host": ["{{base_url}}"],
              "path": ["auth", "register"]
            },
            "description": "Register a new user account"
          },
          "response": []
        },
        {
          "name": "Login User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.status === 'success') {",
                  "        pm.collectionVariables.set('access_token', response.data.tokens.access_token);",
                  "        pm.collectionVariables.set('refresh_token', response.data.tokens.refresh_token);",
                  "        pm.collectionVariables.set('user_id', response.data.user.id);",
                  "        pm.test('Login successful', () => {",
                  "            pm.expect(response.data.user.email).to.eql('test@example.com');",
                  "        });",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test@example.com\",\n  \"password\": \"TestPassword123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/login",
              "host": ["{{base_url}}"],
              "path": ["auth", "login"]
            },
            "description": "Login with existing user credentials"
          },
          "response": []
        },
        {
          "name": "Refresh Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.status === 'success') {",
                  "        pm.collectionVariables.set('access_token', response.data.tokens.access_token);",
                  "        pm.collectionVariables.set('refresh_token', response.data.tokens.refresh_token);",
                  "        pm.test('Token refresh successful', () => {",
                  "            pm.expect(response.data.tokens.access_token).to.be.a('string');",
                  "        });",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"{{refresh_token}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/refresh",
              "host": ["{{base_url}}"],
              "path": ["auth", "refresh"]
            },
            "description": "Refresh access token using refresh token"
          },
          "response": []
        }
      ],
      "description": "User authentication endpoints"
    },
    {
      "name": "Todo Management",
      "item": [
        {
          "name": "Get Today's Todos",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{access_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/todos",
              "host": ["{{base_url}}"],
              "path": ["todos"]
            },
            "description": "Get all todos for today, automatically creates daily record if needed"
          },
          "response": []
        },
        {
          "name": "Create Todo",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.success) {",
                  "        pm.collectionVariables.set('todo_id', response.data.id);",
                  "        pm.test('Todo created successfully', () => {",
                  "            pm.expect(response.data.text).to.eql('Test todo item');",
                  "            pm.expect(response.data.completed).to.be.false;",
                  "        });",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{access_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"text\": \"Test todo item\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/todos",
              "host": ["{{base_url}}"],
              "path": ["todos"]
            },
            "description": "Create a new todo item for today"
          },
          "response": []
        },
        {
          "name": "Update Todo Text",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{access_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"text\": \"Updated todo text\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/todos/{{todo_id}}",
              "host": ["{{base_url}}"],
              "path": ["todos", "{{todo_id}}"]
            },
            "description": "Update the text of an existing todo"
          },
          "response": []
        },
        {
          "name": "Complete Todo",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{access_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"completed\": true\n}"
            },
            "url": {
              "raw": "{{base_url}}/todos/{{todo_id}}",
              "host": ["{{base_url}}"],
              "path": ["todos", "{{todo_id}}"]
            },
            "description": "Mark a todo as completed"
          },
          "response": []
        },
        {
          "name": "Uncomplete Todo",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{access_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"completed\": false\n}"
            },
            "url": {
              "raw": "{{base_url}}/todos/{{todo_id}}",
              "host": ["{{base_url}}"],
              "path": ["todos", "{{todo_id}}"]
            },
            "description": "Mark a todo as incomplete"
          },
          "response": []
        },
        {
          "name": "Update Todo Text and Status",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{access_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"text\": \"Updated and completed todo\",\n  \"completed\": true\n}"
            },
            "url": {
              "raw": "{{base_url}}/todos/{{todo_id}}",
              "host": ["{{base_url}}"],
              "path": ["todos", "{{todo_id}}"]
            },
            "description": "Update both text and completion status of a todo"
          },
          "response": []
        },
        {
          "name": "Delete Todo",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{access_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/todos/{{todo_id}}",
              "host": ["{{base_url}}"],
              "path": ["todos", "{{todo_id}}"]
            },
            "description": "Delete a specific todo item"
          },
          "response": []
        },
        {
          "name": "Reset All Todos",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{access_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/todos/reset",
              "host": ["{{base_url}}"],
              "path": ["todos", "reset"]
            },
            "description": "Reset all todos for today (mark all as incomplete)"
          },
          "response": []
        }
      ],
      "description": "Todo CRUD operations and management"
    },
    {
      "name": "Protected Routes",
      "item": [
        {
          "name": "Get Current User",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{access_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/user/me",
              "host": ["{{base_url}}"],
              "path": ["user", "me"]
            },
            "description": "Get current authenticated user profile and achievement stats"
          },
          "response": []
        }
      ],
      "description": "Routes that require authentication"
    },
    {
      "name": "Error Testing",
      "item": [
        {
          "name": "Register - Invalid Email",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"testuser\",\n  \"email\": \"invalid-email\",\n  \"password\": \"TestPassword123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/register",
              "host": ["{{base_url}}"],
              "path": ["auth", "register"]
            },
            "description": "Test registration with invalid email format"
          },
          "response": []
        },
        {
          "name": "Register - Weak Password",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"testuser\",\n  \"email\": \"test@example.com\",\n  \"password\": \"weak\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/register",
              "host": ["{{base_url}}"],
              "path": ["auth", "register"]
            },
            "description": "Test registration with weak password"
          },
          "response": []
        },
        {
          "name": "Login - Wrong Password",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test@example.com\",\n  \"password\": \"WrongPassword123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/login",
              "host": ["{{base_url}}"],
              "path": ["auth", "login"]
            },
            "description": "Test login with incorrect password"
          },
          "response": []
        },
        {
          "name": "Protected Route - No Token",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/user/me",
              "host": ["{{base_url}}"],
              "path": ["user", "me"]
            },
            "description": "Test protected route without authentication token"
          },
          "response": []
        },
        {
          "name": "Protected Route - Invalid Token",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "invalid.jwt.token",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/user/me",
              "host": ["{{base_url}}"],
              "path": ["user", "me"]
            },
            "description": "Test protected route with invalid JWT token"
          },
          "response": []
        },
        {
          "name": "Refresh - Invalid Token",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"invalid.refresh.token\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/refresh",
              "host": ["{{base_url}}"],
              "path": ["auth", "refresh"]
            },
            "description": "Test token refresh with invalid refresh token"
          },
          "response": []
        }
      ],
      "description": "Test error scenarios and validation"
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Set base URL if not already set",
          "if (!pm.collectionVariables.get('base_url')) {",
          "    pm.collectionVariables.set('base_url', 'http://localhost:49465');",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test to check response time",
          "pm.test('Response time is less than 2000ms', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(2000);",
          "});",
          "",
          "// Global test to check response format",
          "pm.test('Response has valid JSON format', function () {",
          "    pm.response.to.have.jsonBody();",
          "});"
        ]
      }
    }
  ]
}
